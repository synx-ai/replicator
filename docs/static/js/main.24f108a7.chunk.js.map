{"version":3,"sources":["data/estatutos.js","data/convenios.js","libs/diff_match_patch_uncompressed.js","components/Topnav/Topnav.js","components/Container/Container.js","components/Options/Options.js","components/InvisibleSelect/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","diff_match_patch","this","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","Diff","op","text","prototype","length","toString","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","diff_linesToWords_","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","data","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","Topnav","props","className","children","Container","other","Options","options","map","option","value","key","onClick","onChange","bind","name","InvisibleSelect","style","position","evt","target","display","top","width","left","right","bottom","opacity","disabled","placeholder","SimpleCrypto","require","default","Patcher","PatcherInstance","PatcherInstanceResult","DEFAULT_SRC","trim","DEFAULT_SRC_EDITED","DEFAULT_PATCH","LOGIN","synx","src","Convenios","Estatutos","Editor","Fragment","title","ev","App","state","user","password","view","findType","editorStyle","srcText","srcTextEdited","patchText","patchTextEdited","srcHtmlDiff","onChangeKey","val","force","setState","diffPatched","textToPatch","diff","patch_list","newText","lineText1","lineText2","diff_lineMode","patchHtmlDiff","componentDidMount","prompt","simpleCrypto","decryptedSrc","decryptedPatch","decrypt","alert","color","paddingRight","console","log","onForceUpdate","onLogin","exact","path","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24f108a7.chunk.js","sourcesContent":["module.exports = ``;","module.exports = `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`;","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * Attempts to look like a two-element array (which is what this used to be).\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  this[0] = op;\n  this[1] = text;\n};\n\ndiff_match_patch.Diff.prototype.length = 2;\n\n/**\n * Emulate the output of a two-element array.\n * @return {string} Diff operation as a string.\n */\ndiff_match_patch.Diff.prototype.toString = function() {\n  return this[0] + ',' + this[1];\n};\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n\n\n\n// JAVIERBYTE START\n\n\n\ndiff_match_patch.prototype.diff_linesToWords_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      // lineEnd = Math.min(text.indexOf(' ', lineStart), text.indexOf('\\n', lineStart));\n      lineEnd = text.indexOf(' ', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n// JAVIERBYTE END\n\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n// CLOSURE:begin_strip\n// Lines below here will not be included in the Closure-compatible library.\n\n// Export these global variables so that they survive Google's JS compiler.\n// In a browser, 'this' will be 'window'.\n// Users of node.js should 'require' the uncompressed version since Google's\n// JS compiler may break the following exports for non-browser environments.\n/** @suppress {globalThis} */\nthis['diff_match_patch'] = diff_match_patch;\n/** @suppress {globalThis} */\nthis['DIFF_DELETE'] = DIFF_DELETE;\n/** @suppress {globalThis} */\nthis['DIFF_INSERT'] = DIFF_INSERT;\n/** @suppress {globalThis} */\nthis['DIFF_EQUAL'] = DIFF_EQUAL;\n","import React from \"react\";\n\nimport \"./Topnav.css\";\n\nfunction Topnav(props) {\n  return <nav className=\"kamina-topnav\">\n    {props.children}\n  </nav>\n}\n\nexport default Topnav;","import React from \"react\";\n\nimport \"./Container.css\";\n\nfunction Container(props) {\n  const { children, className, ...other } = props;\n\n  return (\n    <nav className={[\"kamina-container\", className].join(\" \")} {...other}>\n      {props.children}\n    </nav>\n  );\n}\n\nexport default Container;\n ","import React from \"react\";\n\nimport \"./Options.css\";\n\nfunction Options(props) {\n  return (\n    <div className=\"kamina-options\">\n      {props.options.map(option => (\n        <div\n          className={`kamina-options-el ${\n            option.value === props.value ? \"-active\" : \"\"\n          }`}\n          key={option.value}\n          onClick={props.onChange.bind(this, option.value)}\n        >\n          {option.name}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Options;\n","import React from \"react\";\n\nfunction InvisibleSelect(props) {\n\tconst { options = [], onChange = () => {} } = props;\n\n\treturn (\n\t\t<div style={{ position: \"relative\" }}>\n\t\t\t{props.children}\n\t\t\t<select\n\t\t\t\tonChange={evt => {\n\t\t\t\t\tonChange(evt.target.value);\n\t\t\t\t}}\n\t\t\t\tvalue={props.value}\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"block\",\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\topacity: 0\n\t\t\t\t}}>\n\t\t\t\t<option disabled value={null}>\n\t\t\t\t\t{props.placeholder}\n\t\t\t\t</option>\n\n\t\t\t\t{options.map(option => (\n\t\t\t\t\t<option value={option.value} key={option.value}>\n\t\t\t\t\t\t{option.name}\n\t\t\t\t\t</option>\n\t\t\t\t))}\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n\nexport default InvisibleSelect;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Topnav from \"./components/Topnav/Topnav.js\";\nimport Container from \"./components/Container/Container.js\";\nimport Options from \"./components/Options/Options.js\";\nimport InvisibleSelect from \"./components/InvisibleSelect/index.js\";\n\nimport Estatutos from \"./data/estatutos.js\";\nimport Convenios from \"./data/convenios.js\";\n\nconst SimpleCrypto = require(\"simple-crypto-js\").default;\n\nconst Patcher = require(\"./libs/diff_match_patch_uncompressed.js\");\nconst PatcherInstance = new Patcher.diff_match_patch();\nconst PatcherInstanceResult = new Patcher.diff_match_patch();\n\nPatcherInstance.Diff_Timeout = 100 * 1000;\nPatcherInstanceResult.Diff_Timeout = 100 * 1000;\n\nPatcherInstance.Match_Distance = 10 * 1000 * 1000;\nPatcherInstanceResult.Match_Distance = 10 * 1000 * 1000;\n\nPatcherInstance.Match_Threshold = 0.1;\nPatcherInstanceResult.Match_Threshold = 0.1;\n\nfunction diff_lineMode(text1, text2) {\n  var dmp = new Patcher.diff_match_patch();\n  var a = dmp.diff_linesToWords_(text1, text2);\n  var lineText1 = a.chars1;\n  var lineText2 = a.chars2;\n  var lineArray = a.lineArray;\n  var diffs = dmp.diff_main(lineText1, lineText2, false);\n  dmp.diff_charsToLines_(diffs, lineArray);\n  return diffs;\n}\n\nconst DEFAULT_SRC = `\nCláusula 1. Esta cláusula está en ambos documentos.\n\nCláusula 2. Otra cláusula con otro texto diferente. Esta solo está en el master.\n\nCláusula 3. Esta cláusula está en ambos documentos y los cambios tienen que reflejarse.\n\nCláusula 4. Match no exacto, pero LOS CAMBIOS también tienen que ser copiados de un documento a otro.\n`.trim();\n\nconst DEFAULT_SRC_EDITED = `\nCláusula 1. Esta cláusula está en los dos documentos.\n\nCláusula 2. Otra cláusula con otro texto diferente. Esta solo está en el master.\n\nCláusula 3. Esta cláusula está en ambos documentos y los cambios tienen que reflejarse.\n\nCláusula 4. Match no exacto, pero LOS CAMBIOS también tienen que ser copiados de un documento a otro.\n`.trim();\n\nconst DEFAULT_PATCH = `\nCláusula 1. Esta cláusula está en ambos documentos.\n\nCláusula 2. Esta cláusula está en ambos documentos y los cambios tienen que reflejarse.\n\nCláusula 3. Match no exacto, pero LAS DIFERENCIAS también tienen que ser copiados de un documento a otro.\n`.trim();\n\nconst LOGIN = {\n  synx: {\n    src: Convenios.trim(),\n    patch: Estatutos.trim()\n  }\n};\n\nfunction Editor(props) {\n  return (\n    <React.Fragment>\n      {props.title && <div className=\"kamina-editor-title\">{props.title}</div>}\n      <textarea\n        disabled={props.disabled}\n        className=\"kamina-editor\"\n        value={props.value}\n        onChange={ev => {\n          props.onChange(ev.target.value);\n        }}\n      />\n    </React.Fragment>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    user: null,\n    password: null,\n\n    view: \"EDITOR\",\n    findType: \"WORD\",\n    editorStyle: \"AUTO\",\n\n    srcText: DEFAULT_SRC,\n    srcTextEdited: DEFAULT_SRC_EDITED,\n    patchText: DEFAULT_PATCH,\n    patchTextEdited: DEFAULT_PATCH,\n\n    srcHtmlDiff: \"\"\n  };\n\n  componentDidMount() {\n    this.onChangeKey(\"srcTextEdited\", this.state.srcTextEdited);\n  }\n\n  onForceUpdate() {\n    this.onChangeKey(\"srcTextEdited\", this.state.srcTextEdited, true);\n  }\n\n  onChangeKey(key, val, force) {\n    this.setState({\n      [key]: val\n    });\n\n    this.state.key = val;\n\n    if (key === \"srcText\") {\n      this.setState(state => {\n        return {\n          srcTextEdited: val,\n          patchTextEdited: state.patchText\n        };\n      });\n    }\n\n    if (key === \"patchText\") {\n      this.setState(state => {\n        return {\n          patchTextEdited: val\n        };\n      });\n    }\n\n    if (key === \"srcTextEdited\") {\n      if (this.state.editorStyle === \"MANUAL\" && !force) return;\n\n      const text1 = this.state.srcText;\n      const text2 = val;\n      const textToPatch = this.state.patchText;\n\n      let diff = PatcherInstance.diff_main(text1, text2, true);\n\n      // if (diff.length > 2) {\n      //   PatcherInstance.diff_cleanupSemantic(diff);\n      // }\n\n      const patch_list = PatcherInstance.patch_make(text1, text2, diff);\n\n      const newText = PatcherInstance.patch_apply(patch_list, textToPatch);\n\n      let diffPatched;\n      if (this.state.findType === \"WORD\") {\n        diffPatched = diff_lineMode(textToPatch, newText[0], true);\n      } else {\n        diffPatched = PatcherInstance.diff_main(textToPatch, newText[0], true);\n      }\n\n      function fixHtml(html) {\n        return html\n          .split(\"background:#ffe6e6;\")\n          .join(\"background:rgba(255,64,0,0.5);\")\n          .split(\"background:#e6ffe6;\")\n          .join(\"background:rgba(0,255,0,0.5);\")\n          .replace(/&para;/g, \" \");\n      }\n\n      this.setState({\n        patchTextEdited: newText[0],\n        patchHtmlDiff: fixHtml(PatcherInstance.diff_prettyHtml(diffPatched))\n      });\n    }\n\n    if (key === \"findType\" || key === \"view\") {\n      this.setState({}, () => {\n        this.componentDidMount();\n      });\n    }\n  }\n\n  onLogin() {\n    const user = prompt(\"User\", \"synx\");\n\n    if (!LOGIN[user]) {\n      alert(\"User does not exists.\");\n      return;\n    }\n\n    const password = prompt(\"Password\", \"\");\n\n    const simpleCrypto = new SimpleCrypto(password);\n\n    let decryptedSrc = null;\n    let decryptedPatch = null;\n    try {\n      decryptedSrc = simpleCrypto.decrypt(LOGIN[user].src);\n      decryptedPatch = simpleCrypto.decrypt(LOGIN[user].patch);\n      if (decryptedSrc[0] !== \"=\") {\n        decryptedSrc = null;\n      }\n      if (decryptedPatch[0] !== \"=\") {\n        decryptedPatch = null;\n      }\n    } catch (e) {}\n\n    if (!decryptedSrc || !decryptedPatch) {\n      alert(\"Incorrect password\");\n      return;\n    }\n\n    this.setState(\n      {\n        user: user,\n        password: password,\n        srcText: decryptedSrc,\n        srcTextEdited: decryptedSrc,\n        patchText: decryptedPatch,\n        patchTextEdited: decryptedPatch\n      },\n      () => {\n        this.onChangeKey(\"srcTextEdited\", this.state.srcTextEdited);\n      }\n    );\n  }\n\n  render() {\n    const { view, findType, srcText, srcTextEdited, patchText, editorStyle } = this.state;\n\n    return (\n      <Router>\n        <Topnav>\n          <Container className=\"flex flex-align-center\">\n            <b style={{ color: \"#fff\", paddingRight: \"1.5rem\" }}>REPLICATOR</b>\n\n            <div className=\"flex flex-1\">\n              <div style={{ paddingRight: \"1rem\" }}>\n                <div className=\"kamina-option-label\">View</div>\n                <Options\n                  options={[\n                    { name: \"Source\", value: \"SRC\" },\n                    { name: \"Editor\", value: \"EDITOR\" }\n                  ]}\n                  value={view}\n                  onChange={this.onChangeKey.bind(this, \"view\")}\n                />\n              </div>\n\n              {false && (\n                <div style={{ paddingRight: \"1rem\" }}>\n                  <div className=\"kamina-option-label\">Patch Type</div>\n                  <Options\n                    options={[\n                      { name: \"Words\", value: \"WORD\" },\n                      { name: \"Chars\", value: \"CHAR\" }\n                    ]}\n                    value={findType}\n                    onChange={this.onChangeKey.bind(this, \"findType\")}\n                  />\n                </div>\n              )}\n\n              {this.state.user && (\n                <div style={{ paddingRight: \"1rem\" }}>\n                  <InvisibleSelect\n                    options={[\n                      { value: \"doc1\", name: \"Doc 1\" },\n                      { value: \"doc2\", name: \"Doc 2\" }\n                    ]}\n                    placeholder=\"Select Document\"\n                    onChange={val => console.log(val)}\n                    value={null}>\n                    <button>Select Document&#8239; &#8239; &#8239;↓</button>\n                  </InvisibleSelect>\n                </div>\n              )}\n\n              <div style={{ paddingRight: \"1rem\" }}>\n                <div className=\"kamina-option-label\">Editor</div>\n                <Options\n                  options={[\n                    { name: \"Auto\", value: \"AUTO\" },\n                    { name: \"Manual\", value: \"MANUAL\" }\n                  ]}\n                  value={editorStyle}\n                  onChange={this.onChangeKey.bind(this, \"editorStyle\")}\n                />\n              </div>\n\n              {editorStyle === \"MANUAL\" && (\n                <button onClick={this.onForceUpdate.bind(this)} className=\"-alternate\">\n                  Update\n                </button>\n              )}\n\n              <div className=\"flex-1\" />\n\n              <div>\n                <button onClick={this.onLogin.bind(this)}>Login</button>\n              </div>\n            </div>\n          </Container>\n        </Topnav>\n        <Route exact path=\"/replicator\">\n          {view === \"SRC\" && (\n            <section className=\"main-content flex\">\n              <div className=\"flex-1\">\n                <Editor\n                  title=\"Master. Original.\"\n                  value={srcText}\n                  onChange={this.onChangeKey.bind(this, \"srcText\")}\n                />\n              </div>\n              <div className=\"flex-1\">\n                <Editor\n                  title=\"Derivated. Original.\"\n                  value={patchText}\n                  onChange={this.onChangeKey.bind(this, \"patchText\")}\n                />\n              </div>\n            </section>\n          )}\n\n          {view === \"EDITOR\" && (\n            <section className=\"main-content flex\">\n              <div className=\"flex-1\">\n                <Editor\n                  title=\"Master. Editable.\"\n                  value={srcTextEdited}\n                  onChange={this.onChangeKey.bind(this, \"srcTextEdited\")}\n                />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"kamina-editor-title\">Derivated. Result after patch.</div>\n                <div\n                  className=\"kamina-editor -disabled\"\n                  dangerouslySetInnerHTML={{ __html: this.state.patchHtmlDiff }}\n                />\n              </div>\n            </section>\n          )}\n        </Route>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}